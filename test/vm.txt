# vm

MakeVar ← { program 𝕊 name:
  v←@
  Get  ⇐ !∘"Runtime: Variable referenced before definition"
  SetU ⇐ !∘"↩: Variable modified before definition"
  SetN ⇐ {
    Get ↩ {𝕤⋄v}
    (SetU ↩ {v↩𝕩}) 𝕩
  }
  SetQ ⇐ 0∘SetN
  GetC ⇐ {
    r ← Get𝕩
    Get↩SetU↩SetN↩!∘"Internal error: Variable used after clear"
    r
  }
  GetF ⇐ {program 𝕩.Field name}
}
vnot ← { SetU⇐SetN⇐⊢ ⋄ SetQ⇐0˙ }
MakeEnv ← { 𝕊p‿v‿n‿e:
  ns ← v-≠n  # Number of special names
  parent ⇐ p
  program ⇐ p.program
  vars ⇐ program⊸MakeVar¨ (ns⥊¯1) ∾ n
  MakeNS ⇐ {𝕤
    v ← @ ⊣´¨ n ⊔ ns↓vars  # Lookup table
    Field ⇐ {𝕨𝕊i:
      cross ← 𝕨 { 𝕨1⊘≡𝕩 ? ⊢ ; ⊑ 𝕩.names ⊐ ⊏⟜𝕨.names } program
      (Cross i) ⊑ v
    }
  }
}

VO ← { d←𝕏@, s←𝕏@, s⊑·{𝕩.vars}{𝕩.parent}⍟d }

nothing  ← {⇐}
skipMark ← {⇐}

Namespace ← {𝕩.MakeNS@}
ReadNS ← { e‿i 𝕊 𝕩:
  "Key lookup in non-namespace" ! 6=•Type𝕩
  (e.program 𝕩.Field i).Get @
}

ref ← {
  Matcher ⇐ {𝕊 const:
    SetQ ⇐ const˙ ≢ ⊢
  }
  Array ⇐ {𝕊 arr:
    Get  ⇐ {𝕩.Get@}¨ arr˙
    _set_ ← {S _𝕣_ e:
      Err ← {(e∾": "∾𝕩)!e≡@ ⋄ ⟨1⟩}
      {
        0=•Type𝕩 ? arr ≡○≢◶⟨Err∘"Target and value shapes don't match", S¨⟩ 𝕩 ;
        # TODO "Cannot extract non-name from namespace" if 𝕨.GetF doesn't exist
        6=•Type𝕩 ? S⟜({(𝕨.GetF 𝕩).Get@}⟜𝕩)¨ arr ;
        Err "Multiple targets but atomic value"
      }
    }
    SetN ⇐    {𝕨.SetN𝕩}_set_"←"
    SetU ⇐    {𝕨.SetU𝕩}_set_"←"
    SetQ ⇐ ∨´ {𝕨.SetQ𝕩}_set_@⎊⟨1⟩ # TODO fix GetF errors and avoid ⎊
  }
  Alias ⇐ {env‿name 𝕊 r:
    SetN‿SetU‿SetQ ⇐ r
    GetF ⇐ {env.program 𝕩.Field name}
  }
}

Get ← {𝕩.Get @}⚇0

MakeStack ← {
  s ← 𝕩                          # Stack (a list)
  cont ⇐ 1                       # Whether to continue execution
  rslt ⇐ skipMark                # Result: skipMark to abort current body
  Push ⇐ {s∾↩<𝕩}                 # Push a value
  Pop  ⇐ {t←-𝕩 ⋄ (s↓˜↩t) ⊢ ⌽t↑s} # Pop 𝕩 values; return as list
  Peek ⇐ {𝕤⋄¯1⊑s}                # Return but don't pop top value
  Ret  ⇐ {rslt↩𝕩 ⋄ cont↩0 ⋄ "Internal compiler error: Wrong stack size"!𝕨≥≠s}
  Skip ⇐ {𝕤⋄       cont↩0}
}

ops ← ((!∘"Unknown opcode")˙⊣´⊢)¨ ⊔˝ ⍉> ⟨
  # Constants and drop
   0‿{i←𝕏@ ⋄ {s𝕊e: s.Push         i⊑e.program.consts } }
   1‿{i←𝕏@ ⋄ {s𝕊e: s.Push e {𝕎𝕩}˜ i⊑e.program.blocks } }
   6‿(       {s𝕊e: s.Pop 1 }˙)
  # Returns
   7‿(       {s𝕊e: 0 s.Ret ⊑s.Pop 1 }˙)
   8‿(       {s𝕊e: 1 s.Ret Namespace e }˙)
  # Arrays
  11‿{i←𝕏@ ⋄ {s𝕊e: s.Push           ⌽s.Pop i } }
  12‿{i←𝕏@ ⋄ {s𝕊e: s.Push ref.Array ⌽s.Pop i } }
  # Application
  16‿(       {s𝕊e: s.Push {   f‿x:   F x }   s.Pop 2 }˙)
  17‿(       {s𝕊e: s.Push { w‿f‿x: w F x }   s.Pop 3 }˙)
  20‿(       {s𝕊e: s.Push {   g‿h:   G H }   s.Pop 2 }˙)
  21‿(       {s𝕊e: s.Push { f‿g‿h: F G H }   s.Pop 3 }˙)
  26‿(       {s𝕊e: s.Push { f‿m  : F _m    } s.Pop 2 }˙)
  27‿(       {s𝕊e: s.Push { f‿m‿g: F _m_ g } s.Pop 3 }˙)
  # Application with Nothing
  18‿(       {s𝕊e: s.Push {   f‿x:                     F⍟(nothing⊸≢) x } s.Pop 2 }˙) # Like 16
  19‿(       {s𝕊e: s.Push { w‿f‿x: (nothing≢w˙)◶⟨F,w˙⊸F⟩⍟(nothing⊸≢) x } s.Pop 3 }˙) # Like 17
  23‿(       {s𝕊e: s.Push { f‿g‿h: {f≡nothing?G H;F G H}               } s.Pop 3 }˙) # Like 21
  22‿(       {s𝕊e: "Left argument required" ! nothing≢s.Peek@ }˙)
  # Variables
  32‿{v←VO𝕩⋄ {s𝕊e: s.Push (V e).Get @ } }
  34‿{v←VO𝕩⋄ {s𝕊e: s.Push (V e).GetC@ } }
  33‿{v←VO𝕩⋄ {s𝕊e: s.Push  V e        } }
  # Headers
  42‿(       {s𝕊e: {0:s.Skip@; 1:@; 𝕊:!"Predicate value must be 0 or 1"} ⊑s.Pop 1 }˙)
  43‿(       {s𝕊e: s.Push ref.Matcher ⊑s.Pop 1 }˙)
  44‿(       {s𝕊e: s.Push vnot }˙)
  # Assignment
  47‿(       {s𝕊e: s.Skip⍟⊢{r‿  v: r.SetQ   v           } s.Pop 2 }˙)  # r:
  48‿(       {s𝕊e: s.Push { r‿  v: r.SetN⊸⊢ v           } s.Pop 2 }˙)  # r  ←v
  49‿(       {s𝕊e: s.Push { r‿  v: r.SetU⊸⊢ v           } s.Pop 2 }˙)  # r  ↩v
  50‿(       {s𝕊e: s.Push { r‿f‿x: r.SetU⊸⊢ (r.Get@)F x } s.Pop 3 }˙)  # r F↩x
  51‿(       {s𝕊e: s.Push { r‿f  : r.SetU⊸⊢ F r.Get@    } s.Pop 2 }˙)  # r F↩
  # Namespaces
  64‿{i←𝕏@ ⋄ {s𝕊e: s.Push e‿i ReadNS    ⊑s.Pop 1 } }
  66‿{i←𝕏@ ⋄ {s𝕊e: s.Push e‿i ref.Alias ⊑s.Pop 1 } }
⟩

RunBC ← { bc‿pos‿env:
  Next ← {𝕤⋄ (pos+↩1) ⊢ pos⊑bc }
  stack ← MakeStack ⟨⟩
  Step ← {𝕊:
    op ← (Next@) ⊑ ops
    op ↩ Op next
    stack Op env
    stack.cont
  }
  _while_ ← {𝔽⍟𝔾∘𝔽_𝕣_𝔾∘𝔽⍟𝔾𝕩}
  Step _while_ ⊢ 1
  stack.rslt
}

{ VM bc‿consts‿blockInfo‿bodyInfo‿loc‿token:

  bodies ← {start‿vars‿names‿export:
    {parent 𝕊 args:
      env ← MakeEnv parent‿vars‿names‿export
      (⊢ {𝕩.SetN 𝕨}¨ ≠↑env.vars˙) args
      RunBC bc‿start‿env
    }
  }¨ bodyInfo

  blocks ← {type‿imm‿body:
    inner ← imm ⊑ type ⊑ ⟨
      2⥊⟨{𝕊n: N ⟨⟩}⟩
      {𝕊n: {d←N 𝕣‿𝕗  ⋄𝕨D𝕩}}‿{𝕊n: {N 𝕣‿𝕗  }}
      {𝕊n: {d←N 𝕣‿𝕗‿𝕘⋄𝕨D𝕩}}‿{𝕊n: {N 𝕣‿𝕗‿𝕘}}
    ⟩
    outer ← imm ⊑ ⟨
      {
        m‿d: {𝕊v: {M 𝕤‿𝕩‿nothing∾v;D 𝕤‿𝕩‿𝕨∾v}} ;
        ⟨b⟩: {𝕊v: {B 𝕤‿𝕩‿(𝕨⊣nothing)∾v}}
      }
      ⊑
    ⟩

    nmc ← "No matching case"
    Then ← {first 𝕊 next: {skipMark≢r←𝕨First𝕩 ? r ; 𝕨Next𝕩}}
    run ← {
      1=•Type 𝕩 ?
      ⟨(𝕩⊑bodies) Then {!∘nmc}⟩
    ;
      "Internal compiler error: Invalid body indices" ! 1==𝕩
      ! (≠𝕩) ≡ 2-imm
      e ← {imm ? ⟨nmc⟩ ;
        (0=≠¨𝕩) nmc⍟⊣¨ "Left argument "⊸∾¨⟨"not allowed","required"⟩
      }𝕩
      𝕩 Then´⟜(⊏⟜bodies)˜⟜{!∘𝕩}¨ e
    } body

    {𝕊 parent:
      Inner Outer {parent˙ 𝕏 ⊢}¨ run
    }
  }¨ blockInfo

  program ← {
    consts⇐consts
    blocks⇐blocks
    names⇐0⊑2⊑token
  }
  
  (⊑blocks){𝔽} {program⇐program}
}

==>

PROGRAM(ASSIGN(FUN,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT),DELIM,ASSIGN(VAL,EXPR(NULL)),DELIM,EXPORT(FUN,EXPR(PRIMFUN,PRIMMOD2,STRING)),DELIM,EXPORT(FUN,EXPR(PRIMFUN,PRIMMOD2,STRING)),DELIM,EXPORT(FUN,EXPR(BLOCK(DELIM,EXPR(FUN,REASSIGN,BLOCK(EXPR(SPECVAL),DELIM,EXPR(VAL))),DELIM,EXPR(PAREN(EXPR(FUN,REASSIGN,BLOCK(EXPR(VAL,REASSIGN,SPECVAL)))),SPECVAL),DELIM))),DELIM,EXPORT(FUN,EXPR(NUMBER,PRIMMOD2,FUN)),DELIM,EXPORT(FUN,EXPR(BLOCK(DELIM,ASSIGN(VAL,EXPR(FUN,SPECVAL)),DELIM,EXPR(FUN,REASSIGN,FUN,REASSIGN,FUN,REASSIGN,PRIMFUN,PRIMMOD2,STRING),DELIM,EXPR(VAL),DELIM))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(VAL,LOOKUP(SPECVAL,FUN),VAL)))),DELIM))),DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPORT(FUN,EXPORT(FUN,EXPR(PRIMFUN))),DELIM,EXPORT(FUN,EXPR(NUMBER,PRIMMOD1))))),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(SPECFUN,STRIDE(VAL,VAL,VAL,VAL),PUNCT),DELIM,ASSIGN(VAL,EXPR(VAL,PRIMFUN,PRIMFUN,VAL)),DELIM,EXPORT(VAL,EXPR(VAL)),DELIM,EXPORT(VAL,EXPR(LOOKUP(VAL,VAL))),DELIM,EXPORT(VAL,EXPR(VAL,PRIMMOD2,FUN,PRIMMOD1,PAREN(EXPR(VAL,PRIMFUN,NUMBER)),PRIMFUN,VAL)),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECVAL),DELIM,ASSIGN(VAL,EXPR(NULL,PRIMFUN,PRIMMOD1,PRIMMOD1,VAL,PRIMFUN,VAL,PRIMFUN,VAL)),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECVAL,SPECFUN,VAL,PUNCT),DELIM,ASSIGN(VAL,EXPR(SPECVAL,BLOCK(EXPR(SPECVAL,NUMBER,PRIMMOD2,PRIMFUN,SPECVAL,PUNCT,PRIMFUN,PUNCT,PRIMFUN,LOOKUP(SPECVAL,VAL),PRIMFUN,PRIMFUN,PRIMMOD2,LOOKUP(SPECVAL,VAL))),VAL)),DELIM,EXPR(PAREN(EXPR(FUN,VAL)),PRIMFUN,VAL),DELIM))),DELIM))),DELIM))),DELIM,DELIM,ASSIGN(FUN,EXPR(BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(VAL,PRIMFUN,NOTHING,BLOCK(EXPR(LOOKUP(SPECVAL,VAL))),BLOCK(EXPR(LOOKUP(SPECVAL,VAL))),PRIMMOD2,VAL)))),DELIM,DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPORT))),DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPORT))),DELIM,DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(LOOKUP(SPECVAL,FUN),NULL)))),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(STRIDE(VAL,VAL),SPECFUN,SPECVAL,PUNCT),DELIM,EXPR(STRING,PRIMFUN,NUMBER,PRIMFUN,SYSFUN,SPECVAL),DELIM,EXPR(LOOKUP(PAREN(EXPR(LOOKUP(VAL,VAL),LOOKUP(SPECVAL,FUN),VAL)),FUN),NULL),DELIM))),DELIM,DELIM,ASSIGN(VAL,EXPR(BLOCK(DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECFUN,VAL,PUNCT),DELIM,EXPORT(FUN,EXPR(VAL,PRIMMOD1,PRIMFUN,PRIMFUN)),DELIM))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECFUN,VAL,PUNCT),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(LOOKUP(SPECVAL,FUN),NULL)),PRIMMOD1,VAL,PRIMMOD1)),DELIM,ASSIGN(MOD2,EXPR(BLOCK(EXPR(FUN,SPECMOD2,VAL,PUNCT),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(PAREN(EXPR(VAL,PRIMFUN,STRING,PRIMFUN,SPECVAL)),PRIMFUN,VAL,PRIMFUN,NULL),DELIM,EXPR(LIST(EXPR(NUMBER)))))),DELIM,EXPR(BLOCK(DELIM,EXPR(NUMBER,PRIMFUN,SYSFUN,SPECVAL,PUNCT,VAL,PRIMFUN,PRIMMOD2,PRIMFUN,PRIMMOD2,LIST(EXPR(FUN,PRIMMOD2,STRING),DELIM,EXPR(FUN,PRIMMOD1)),SPECVAL,PUNCT),DELIM,DELIM,EXPR(NUMBER,PRIMFUN,SYSFUN,SPECVAL,PUNCT,FUN,PRIMMOD2,PAREN(EXPR(BLOCK(EXPR(LOOKUP(PAREN(EXPR(LOOKUP(SPECVAL,FUN),SPECVAL)),FUN),NULL)),PRIMMOD2,SPECVAL)),PRIMMOD1,VAL,PUNCT),DELIM,EXPR(FUN,STRING),DELIM)),DELIM))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(LOOKUP(SPECVAL,FUN),SPECVAL)),MOD2,STRING)),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(LOOKUP(SPECVAL,FUN),SPECVAL)),MOD2,STRING)),DELIM,EXPORT(FUN,EXPR(PRIMFUN,PRIMMOD1,BLOCK(EXPR(LOOKUP(SPECVAL,FUN),SPECVAL)),MOD2,NULL,PRIMMOD2,LIST(EXPR(NUMBER)))),DELIM))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(STRIDE(VAL,VAL),SPECFUN,VAL,PUNCT),DELIM,EXPORT(STRIDE(FUN,FUN,FUN),EXPR(VAL)),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(LOOKUP(VAL,VAL),LOOKUP(SPECVAL,FUN),VAL)))),DELIM))),DELIM))),DELIM,DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(LOOKUP(SPECVAL,FUN),NULL)),PRIMMOD2,NUMBER)),DELIM,DELIM,ASSIGN(FUN,EXPR(BLOCK(DELIM,ASSIGN(VAL,EXPR(SPECVAL)),DELIM,EXPORT(VAL,EXPR(NUMBER)),DELIM,EXPORT(VAL,EXPR(VAL)),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(VAL,PRIMFUN,REASSIGN,PRIMFUN,SPECVAL)))),DELIM,EXPORT(FUN,EXPR(BLOCK(ASSIGN(VAL,EXPR(PRIMFUN,SPECVAL)),DELIM,EXPR(PAREN(EXPR(VAL,PRIMFUN,PRIMMOD1,REASSIGN,VAL)),PRIMFUN,PRIMFUN,VAL,PRIMFUN,VAL)))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECVAL),DELIM,EXPR(NUMBER,PRIMFUN,VAL)))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(VAL,REASSIGN,SPECVAL),DELIM,EXPR(VAL,REASSIGN,NUMBER),DELIM,EXPR(STRING,PRIMFUN,SPECVAL,PRIMFUN,PRIMFUN,VAL)))),DELIM,EXPORT(FUN,EXPR(BLOCK(EXPR(SPECVAL),DELIM,EXPR(VAL,REASSIGN,NUMBER)))),DELIM))),DELIM,DELIM,ASSIGN(VAL,EXPR(PAREN(EXPR(PAREN(EXPR(PRIMFUN,PRIMMOD2,STRING)),PRIMMOD1,PRIMFUN,PRIMMOD1,PRIMFUN)),PRIMMOD1,PRIMFUN,PRIMMOD1,PRIMFUN,PRIMFUN,LIST(DELIM,DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),VAL,PRIMFUN,LOOKUP(VAL,VAL,VAL))))))),DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),VAL,BLOCK(EXPR(SPECFUN,SPECVAL)),PRIMMOD1,VAL,PRIMFUN,LOOKUP(VAL,VAL,VAL))))))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,NUMBER,LOOKUP(VAL,FUN),PRIMFUN,LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,NUMBER,LOOKUP(VAL,FUN),FUN,VAL)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),PRIMFUN,LOOKUP(VAL,FUN),VAL)))))),DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),LOOKUP(VAL,FUN),PRIMFUN,LOOKUP(VAL,FUN),VAL)))))),DELIM,DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,FUN,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,VAL,FUN,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,FUN,FUN)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,FUN,FUN,FUN)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,FUN,MOD1)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,FUN,MOD2,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,FUN,PRIMMOD2,PAREN(EXPR(VAL,PRIMMOD2,PRIMFUN)),VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,PAREN(EXPR(VAL,PRIMFUN,VAL,PRIMMOD1)),PRIMMOD2,LIST(EXPR(FUN),DELIM,EXPR(VAL,PRIMMOD1,PRIMMOD2,FUN)),PRIMMOD2,PAREN(EXPR(VAL,PRIMMOD2,PRIMFUN)),VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,BLOCK(EXPR(VAL,PRIMFUN,VAL,PUNCT,FUN,FUN,PUNCT,FUN,FUN,FUN)))),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,STRING,PRIMFUN,VAL,PRIMFUN,LOOKUP(VAL,FUN),NULL)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(FUN,SPECVAL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),LOOKUP(PAREN(EXPR(FUN,VAL)),FUN),NULL)))))),DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(FUN,SPECVAL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),LOOKUP(PAREN(EXPR(FUN,VAL)),FUN),NULL)))))),DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(FUN,SPECVAL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),FUN,VAL)))))),DELIM,DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,BLOCK(EXPR(NUMBER,PUNCT,LOOKUP(VAL,FUN),NULL,PUNCT,NUMBER,PUNCT,NULL,PUNCT,SPECFUN,PUNCT,PRIMFUN,STRING)),PRIMFUN,LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),LOOKUP(VAL,FUN),PRIMFUN,LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),VAL)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),PRIMMOD2,PRIMFUN,BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,LOOKUP(VAL,FUN),VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,LOOKUP(VAL,FUN),PRIMMOD2,PRIMFUN,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,LOOKUP(VAL,FUN),PRIMMOD2,PRIMFUN,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT,LOOKUP(VAL,FUN),PRIMMOD2,PRIMFUN,PAREN(EXPR(LOOKUP(VAL,FUN),NULL)),FUN,VAL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,EXPR(STRIDE(NUMBER,PAREN(EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),BLOCK(EXPR(STRIDE(VAL,VAL),PUNCT,LOOKUP(VAL,FUN),PRIMMOD2,PRIMFUN,FUN,LOOKUP(VAL,FUN),NULL)),LOOKUP(VAL,FUN),NUMBER)),PRIMMOD1)))),DELIM,DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),STRIDE(VAL,VAL),FUN,PRIMFUN,LOOKUP(VAL,FUN),NUMBER)))))),DELIM,EXPR(STRIDE(NUMBER,BLOCK(ASSIGN(VAL,EXPR(SPECFUN,NULL)),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,LOOKUP(VAL,FUN),STRIDE(VAL,VAL),LOOKUP(VAL,FUN),PRIMFUN,LOOKUP(VAL,FUN),NUMBER)))))),DELIM))),DELIM,DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(SPECVAL),DELIM,EXPR(PAREN(EXPR(VAL,PRIMFUN,REASSIGN,NUMBER)),PRIMFUN,VAL,PRIMFUN,VAL)))),DELIM,ASSIGN(VAL,EXPR(FUN,LIST)),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(SPECFUN,PUNCT),DELIM,ASSIGN(VAL,EXPR(PAREN(EXPR(FUN,NULL)),PRIMFUN,VAL)),DELIM,EXPR(VAL,REASSIGN,FUN,VAL),DELIM,EXPR(VAL,FUN,VAL),DELIM,EXPR(LOOKUP(VAL,VAL)),DELIM))),DELIM,ASSIGN(MOD2,EXPR(BLOCK(EXPR(SPECFUN,PRIMMOD2,SPECFUN,PRIMMOD2,SPECFUN,SPECMOD2,SPECFUN,PRIMMOD2,SPECFUN,PRIMMOD2,SPECFUN,SPECVAL)))),DELIM,EXPR(FUN,MOD2,PRIMFUN,NUMBER),DELIM,EXPR(LOOKUP(VAL,VAL)),DELIM))),DELIM,DELIM,EXPR(BLOCK(EXPR(FUN,STRIDE(VAL,VAL,VAL,VAL,VAL,VAL),PUNCT),DELIM,DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPR(STRIDE(VAL,VAL,VAL,VAL),PUNCT),DELIM,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT),DELIM,ASSIGN(VAL,EXPR(FUN,STRIDE(VAL,VAL,VAL,VAL))),DELIM,EXPR(PAREN(EXPR(PRIMFUN,BLOCK(EXPR(LOOKUP(SPECVAL,FUN),SPECVAL)),PRIMMOD1,PRIMFUN,PRIMFUN,LOOKUP(VAL,VAL),PRIMMOD1)),VAL),DELIM,EXPR(FUN,STRIDE(VAL,VAL,VAL)),DELIM)),DELIM),PRIMMOD1,VAL)),DELIM,DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPR(STRIDE(VAL,VAL,VAL),PUNCT),DELIM,ASSIGN(VAL,EXPR(VAL,PRIMFUN,VAL,PRIMFUN,LIST(DELIM,EXPR(NUMBER,PRIMFUN,LIST(EXPR(BLOCK(EXPR(SPECFUN,VAL,PUNCT,FUN,LIST))))),DELIM,EXPR(STRIDE(BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(ASSIGN(VAL,EXPR(FUN,STRIDE(SPECMOD2,SPECVAL))),DELIM,EXPR(SPECVAL,FUN,SPECVAL)))),BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(EXPR(FUN,STRIDE(SPECMOD2,SPECVAL))))))),DELIM,EXPR(STRIDE(BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(ASSIGN(VAL,EXPR(FUN,STRIDE(SPECMOD2,SPECVAL,SPECVAL))),DELIM,EXPR(SPECVAL,FUN,SPECVAL)))),BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(EXPR(FUN,STRIDE(SPECMOD2,SPECVAL,SPECVAL))))))),DELIM))),DELIM,ASSIGN(VAL,EXPR(VAL,PRIMFUN,LIST(DELIM,EXPR(BLOCK(DELIM,EXPR(STRIDE(VAL,VAL),PUNCT,BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(EXPR(FUN,STRIDE(SPECVAL,SPECVAL,VAL),PRIMFUN,VAL,PUNCT,FUN,STRIDE(SPECVAL,SPECVAL,SPECVAL),PRIMFUN,VAL)))),PUNCT),DELIM,EXPR(LIST(EXPR(VAL)),PUNCT,BLOCK(EXPR(SPECFUN,VAL,PUNCT,BLOCK(EXPR(FUN,STRIDE(SPECVAL,SPECVAL,PAREN(EXPR(SPECVAL,PRIMFUN,VAL))),PRIMFUN,VAL))))),DELIM)),DELIM,EXPR(PRIMFUN),DELIM))),DELIM,DELIM,ASSIGN(VAL,EXPR(STRING)),DELIM,ASSIGN(FUN,EXPR(BLOCK(EXPR(VAL,SPECFUN,VAL,PUNCT,BLOCK(ASSIGN(VAL,PRIMFUN,VAL,EXPR(SPECVAL,FUN,SPECVAL,PUNCT,VAL,PUNCT,SPECVAL,FUN,SPECVAL))))))),DELIM,ASSIGN(VAL,EXPR(BLOCK(DELIM,EXPR(NUMBER,PRIMFUN,SYSFUN,SPECVAL,PUNCT),DELIM,EXPR(LIST(EXPR(PAREN(EXPR(SPECVAL,PRIMFUN,VAL)),FUN,BLOCK(EXPR(PRIMFUN,PRIMMOD2,VAL))))),DELIM,EXPR(PUNCT),DELIM,EXPR(STRING,PRIMFUN,NUMBER,PRIMFUN,PRIMFUN,SPECVAL),DELIM,EXPR(PRIMFUN,PAREN(EXPR(PRIMFUN,SPECVAL)),PRIMFUN,NUMBER,PRIMFUN,VAL),DELIM,ASSIGN(VAL,EXPR(BLOCK(EXPR(VAL,PUNCT,LIST(EXPR(VAL)),PUNCT),DELIM,EXPR(PAREN(EXPR(NUMBER,PRIMFUN,PRIMFUN,PRIMMOD1,SPECVAL)),VAL,PRIMMOD2,PRIMFUN,PRIMMOD1,STRING,PRIMMOD2,PRIMFUN,PRIMMOD1,LIST(EXPR(STRING),DELIM,EXPR(STRING))),DELIM),SPECVAL)),DELIM,EXPR(SPECVAL,FUN,PRIMMOD1,PRIMMOD2,PAREN(EXPR(PRIMFUN,PRIMMOD2,VAL)),PRIMMOD1,PRIMMOD2,BLOCK(EXPR(PRIMFUN,PRIMMOD2,SPECVAL)),PRIMMOD1,VAL),DELIM),VAL)),DELIM,DELIM,EXPR(BLOCK(EXPR(SPECFUN,VAL,PUNCT),DELIM,EXPR(FUN,FUN,BLOCK(EXPR(VAL,PRIMMOD1,SPECFUN,PRIMFUN)),PRIMMOD1,VAL),DELIM)),DELIM),PRIMMOD1,VAL)),DELIM,DELIM,ASSIGN(VAL,EXPR(BLOCK(DELIM,EXPORT(VAL,EXPR(VAL)),DELIM,EXPORT(VAL,EXPR(VAL)),DELIM,EXPORT(VAL,EXPR(NUMBER,PRIMFUN,NUMBER,PRIMFUN,VAL)),DELIM))),DELIM,DELIM,EXPR(PAREN(EXPR(PRIMFUN,VAL)),BLOCK(EXPR(SPECFUN)),BLOCK(EXPORT(VAL,EXPR(VAL)))),DELIM)))
