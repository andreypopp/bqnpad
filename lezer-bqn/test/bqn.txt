# number

42
¯9
π
∞
1.1
42e10

==>

PROGRAM(
  EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM,
  EXPR(NUMBER)
)

# string

"hello"
"some
 string"

==>

PROGRAM(EXPR(STRING),DELIM,EXPR(STRING))

# char

@
'a'
'⍉'

==>

PROGRAM(EXPR(NULL),DELIM,EXPR(CHAR),DELIM,EXPR(CHAR))

# layout (,)

1,2

==>

PROGRAM(EXPR(NUMBER),DELIM,EXPR(NUMBER))

# layout (leading ,)

,1,2

==>

PROGRAM(DELIM,EXPR(NUMBER),DELIM,EXPR(NUMBER))

# layout (trailing ,)

1,2,

==>

PROGRAM(EXPR(NUMBER),DELIM,EXPR(NUMBER),DELIM)

# layout (⋄)

1⋄2

==>

PROGRAM(EXPR(NUMBER),DELIM,EXPR(NUMBER))

# layout (leading ⋄)

⋄1⋄2

==>

PROGRAM(DELIM,EXPR(NUMBER),DELIM,EXPR(NUMBER))

# layout (trailing ⋄)

1⋄2⋄

==>

PROGRAM(EXPR(NUMBER),DELIM,EXPR(NUMBER),DELIM)

# layout (newline)

1
2

==>

PROGRAM(EXPR(NUMBER),DELIM,EXPR(NUMBER))

# val

a
aA
a_a

==>

PROGRAM(EXPR(VAL),DELIM,EXPR(VAL),DELIM,EXPR(VAL))

# fun

A
Aa
A_a

==>

PROGRAM(EXPR(FUN),DELIM,EXPR(FUN),DELIM,EXPR(FUN))

# mod1

_mod
_moD
_m_d

==>

PROGRAM(EXPR(MOD1),DELIM,EXPR(MOD1),DELIM,EXPR(MOD1))

# mod2

_mod_
_moD_
_m_d_

==>

PROGRAM(EXPR(MOD2),DELIM,EXPR(MOD2),DELIM,EXPR(MOD2))

# sysval

•a
•aA
•a_a

==>

PROGRAM(EXPR(SYSVAL),DELIM,EXPR(SYSVAL),DELIM,EXPR(SYSVAL))

# fun

•A
•Aa
•A_a

==>

PROGRAM(EXPR(SYSFUN),DELIM,EXPR(SYSFUN),DELIM,EXPR(SYSFUN))

# mod1

•_mod
•_moD
•_m_d

==>

PROGRAM(EXPR(SYSMOD1),DELIM,EXPR(SYSMOD1),DELIM,EXPR(SYSMOD1))

# mod2

•_mod_
•_moD_
•_m_d_

==>

PROGRAM(EXPR(SYSMOD2),DELIM,EXPR(SYSMOD2),DELIM,EXPR(SYSMOD2))

# list

⟨⟩
⟨1⟩
⟨1,2⟩
⟨,1,2,⟩
⟨1⋄2⟩
⟨⋄1⋄2⋄⟩
⟨1
 2⟩
⟨
 1
 2
  ⟩

==>

PROGRAM(
  EXPR(LIST),DELIM,
  EXPR(LIST(EXPR(NUMBER))),DELIM,
  EXPR(LIST(EXPR(NUMBER),DELIM,
  EXPR(NUMBER))),DELIM,
  EXPR(LIST(DELIM,EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM)),DELIM,
  EXPR(LIST(EXPR(NUMBER),DELIM,
  EXPR(NUMBER))),DELIM,
  EXPR(LIST(DELIM,EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM)),DELIM,
  EXPR(LIST(EXPR(NUMBER),DELIM,
  EXPR(NUMBER))),DELIM,
  EXPR(LIST(DELIM,EXPR(NUMBER),DELIM,
  EXPR(NUMBER),DELIM))
)

# stride

1‿2
1‿(2‿3)

==>

PROGRAM(
  EXPR(STRIDE(NUMBER,NUMBER)),DELIM,
  EXPR(STRIDE(NUMBER,PAREN(EXPR(STRIDE(NUMBER,NUMBER)))))
)

# nothing

·
·+1

==>

PROGRAM(EXPR(NOTHING),DELIM,EXPR(NOTHING,PRIMFUN,NUMBER))

# lookup

a.b
a.Fun
a._mod1
a._mod2_
•sys.val
a.b.c
(some).b
{some}.b
⟨some⟩.b

==>

PROGRAM(
  EXPR(LOOKUP(VAL,VAL)),DELIM,
  EXPR(LOOKUP(VAL,FUN)),DELIM,
  EXPR(LOOKUP(VAL,MOD1)),DELIM,
  EXPR(LOOKUP(VAL,MOD2)),DELIM,
  EXPR(LOOKUP(SYSVAL,VAL)),DELIM,
  EXPR(LOOKUP(VAL,VAL,VAL)),DELIM,
  EXPR(LOOKUP(PAREN(EXPR(VAL)),VAL)),DELIM,
  EXPR(LOOKUP(BLOCK(EXPR(VAL)),VAL)),DELIM,
  EXPR(LOOKUP(LIST(EXPR(VAL)),VAL))
)

# assign

a←1
a‿b←1‿2

==>

PROGRAM(
  ASSIGN(VAL,EXPR(NUMBER)),DELIM,
  ASSIGN(STRIDE(VAL,VAL),EXPR(STRIDE(NUMBER,NUMBER)))
)

# reassign

a↩1
a‿b↩1‿2

==>

PROGRAM(
  EXPR(VAL,REASSIGN,NUMBER),DELIM,
  EXPR(STRIDE(VAL,VAL),REASSIGN,STRIDE(NUMBER,NUMBER))
)

# export

a⇐1
a‿b⇐1‿2

==>

PROGRAM(
  EXPORT(VAL,EXPR(NUMBER)),DELIM,
  EXPORT(STRIDE(VAL,VAL),EXPR(STRIDE(NUMBER,NUMBER)))
)

# sme

1{𝕨+𝕩}2‿3‿4

==>

PROGRAM(EXPR(NUMBER,BLOCK(EXPR(SPECVAL,PRIMFUN,SPECVAL)),STRIDE(NUMBER,NUMBER,NUMBER)))

